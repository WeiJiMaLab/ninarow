{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e533169d-bd92-4e97-b266-dcf6d3087b7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# your other imports here ...\n",
    "import sys, os\n",
    "import pandas as pd\n",
    "\n",
    "# TODO: replace with your path/to/ninarow\n",
    "ninarowdir = os.path.dirname(os.getcwd())\n",
    "modelfitdir = ninarowdir + \"/model_fitting/\"\n",
    "# os.listdir(modelfitdir)\n",
    "\n",
    "# sets the import path to the model-fitting directory\n",
    "sys.path.insert(0, modelfitdir)\n",
    "from parsers import *\n",
    "from model_fit import *\n",
    "import model_fit\n",
    "from utils import *\n",
    "\n",
    "\n",
    "# WARNING: DO NOT USE %load_ext autoreload and %autoreload 2 as it interferes with \n",
    "# the Multi-threading processes!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "36965bac-d961-416e-878f-5847f51a0948",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Detected splits in this directory. Loading splits ...\n",
      "Building output directory at ../data/out\n"
     ]
    }
   ],
   "source": [
    "data_path = \"../data\"\n",
    "output_path = \"../data/out\"\n",
    "n_splits = 5\n",
    "fold_number = 1\n",
    "threads = 1\n",
    "random_sample = False\n",
    "verbose = True\n",
    "\n",
    "\n",
    "assert np.all([f\"{i + 1}.csv\" in os.listdir(data_path) for i in range(n_splits)])\n",
    "\n",
    "print(\"Detected splits in this directory. Loading splits ...\")\n",
    "splits = [pd.read_csv(f\"{data_path}/{i + 1}.csv\") for i in range(n_splits)]\n",
    "fold_data = [[csvmove for csvmove in df_to_CSVMove(split, warn = False)] for split in splits]\n",
    "\n",
    "print(f\"Building output directory at {output_path}\")\n",
    "os.makedirs(output_path, exist_ok = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1f7590b8-889f-4103-b123-79a96ee9f5f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Thread 0: Base Seed 3, Seed: 3, Random Number: 10138905509988816501\n",
      "\n",
      "[IMPORTANT] Using MANUAL SEED 3 for reproducibility.\n",
      "Cross validating split 1 against the other 4 splits\n",
      "[Preprocessing] Initial log-likelihood estimation\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 10/10 [00:06<00:00,  1.63it/s]\n",
      "100%|██████████| 8/8 [00:00<00:00, 24332.44it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0] NLL: 20.0288 Params: [2.001, 0.02, 0.2, 0.05, 1.2, 0.801, 1.001, 0.4, 3.501, 5.0]\n",
      "Beginning optimization of a STOCHASTIC objective function\n",
      "\n",
      " Iteration    f-count      E[f(x)]        SD[f(x)]           MeshScale          Method              Actions\n",
      "     0           1         20.0288             nan               1                                  \n",
      "[1] NLL: 26.051 Params: [1.053, 0.68, 0.147, 0.292, 0.539, 0.952, -1.899, -1.372, -4.072, -3.799]\n",
      "[2] NLL: 19.2225 Params: [1.334, 0.294, 0.414, 0.005, 1.939, -4.663, -4.106, 4.424, -3.281, 2.393]\n",
      "[3] NLL: 22.7991 Params: [1.632, 0.782, 0.037, 0.156, 1.082, -3.052, 3.237, 1.782, -0.542, -3.545]\n",
      "[4] NLL: 24.0158 Params: [1.913, 0.396, 0.272, 0.423, 1.346, 1.294, 0.444, -4.99, -2.114, 0.264]\n",
      "[5] NLL: 25.6224 Params: [2.396, 0.624, 0.304, 0.122, 1.769, -2.373, 1.753, -1.235, 2.314, -0.088]\n",
      "[6] NLL: 22.9559 Params: [2.677, 0.127, 0.006, 0.331, 0.755, 3.271, 4.585, 3.037, 0.02, 3.682]\n",
      "[7] NLL: 22.2508 Params: [2.958, 0.95, 0.381, 0.446, 1.61, 4.17, -3.071, 0.669, 3.696, -2.256]\n",
      "[8] NLL: 27.6215 Params: [3.239, 0.452, 0.176, 0.225, 0.96, -0.225, -0.903, -2.627, 3.96, 3.975]\n",
      "[9] NLL: 25.0971 Params: [3.375, 0.326, 0.09, 0.276, 1.549, -3.745, -0.22, -3.428, 4.937, -2.988]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "KeyboardInterrupt\n",
      "\n",
      "Process ForkPoolWorker-21:\n",
      "Traceback (most recent call last):\n",
      "  File \"/ext3/miniconda3/lib/python3.10/multiprocessing/process.py\", line 314, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/ext3/miniconda3/lib/python3.10/multiprocessing/process.py\", line 108, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/ext3/miniconda3/lib/python3.10/multiprocessing/pool.py\", line 125, in worker\n",
      "    result = (True, func(*args, **kwds))\n",
      "  File \"/scratch/hl3976/ma_lab/ninarow/model_fitting/model_fit.py\", line 223, in estimate_log_lik_ibs\n",
      "    search = self.model.create_search(\n",
      "  File \"/scratch/hl3976/ma_lab/ninarow/model_fitting/model_fit.py\", line 151, in create_search\n",
      "    return fourbynine.NInARowBestFirstSearch(heuristic, board)\n",
      "  File \"/scratch/hl3976/ma_lab/ninarow/model_fitting/fourbynine.py\", line 1616, in __init__\n",
      "    _swig_fourbynine.NInARowBestFirstSearch_swiginit(self, _swig_fourbynine.new_NInARowBestFirstSearch(_self, heuristic, board))\n",
      "KeyboardInterrupt\n"
     ]
    }
   ],
   "source": [
    "from multiprocessing import Pool, Value, set_start_method\n",
    "\n",
    "random.seed(10)\n",
    "initialize_global_threads(1, manual_seed = 3)\n",
    "model_fitter = ModelFitter(DefaultModel(), \n",
    "                           random_sample = random_sample, \n",
    "                           verbose = verbose, \n",
    "                           threads = threads)\n",
    "\n",
    "params, loglik_train, loglik_test = model_fitter.cross_validate(fold_data, fold_number - 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "82b88ba9-8694-48cf-b0e9-751da1af6163",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Thread 0: Base Seed 3, Seed: 3, Random Number: 10138905509988816501\n",
      "\n",
      "[IMPORTANT] Using MANUAL SEED 3 for reproducibility.\n",
      "Cross validating split 1 against the other 4 splits\n",
      "[Preprocessing] Initial log-likelihood estimation\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 10/10 [00:06<00:00,  1.59it/s]\n",
      "100%|██████████| 8/8 [00:00<00:00, 23045.63it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0] NLL: 20.0288 Params: [2.001, 0.02, 0.2, 0.05, 1.2, 0.801, 1.001, 0.4, 3.501, 5.0]\n",
      "Beginning optimization of a STOCHASTIC objective function\n",
      "\n",
      " Iteration    f-count      E[f(x)]        SD[f(x)]           MeshScale          Method              Actions\n",
      "     0           1         20.0288             nan               1                                  \n",
      "[1] NLL: 26.051 Params: [1.053, 0.68, 0.147, 0.292, 0.539, 0.952, -1.899, -1.372, -4.072, -3.799]\n",
      "[2] NLL: 19.2225 Params: [1.334, 0.294, 0.414, 0.005, 1.939, -4.663, -4.106, 4.424, -3.281, 2.393]\n",
      "[3] NLL: 22.7991 Params: [1.632, 0.782, 0.037, 0.156, 1.082, -3.052, 3.237, 1.782, -0.542, -3.545]\n",
      "[4] NLL: 24.0158 Params: [1.913, 0.396, 0.272, 0.423, 1.346, 1.294, 0.444, -4.99, -2.114, 0.264]\n",
      "[5] NLL: 25.6224 Params: [2.396, 0.624, 0.304, 0.122, 1.769, -2.373, 1.753, -1.235, 2.314, -0.088]\n",
      "[6] NLL: 22.9559 Params: [2.677, 0.127, 0.006, 0.331, 0.755, 3.271, 4.585, 3.037, 0.02, 3.682]\n",
      "[7] NLL: 22.2508 Params: [2.958, 0.95, 0.381, 0.446, 1.61, 4.17, -3.071, 0.669, 3.696, -2.256]\n",
      "[8] NLL: 27.6215 Params: [3.239, 0.452, 0.176, 0.225, 0.96, -0.225, -0.903, -2.627, 3.96, 3.975]\n",
      "[9] NLL: 25.0971 Params: [3.375, 0.326, 0.09, 0.276, 1.549, -3.745, -0.22, -3.428, 4.937, -2.988]\n",
      "[10] NLL: 20.4715 Params: [3.656, 0.824, 0.354, 0.055, 0.887, 1.909, -3.599, 0.22, 2.72, 0.645]\n",
      "[11] NLL: 25.8475 Params: [3.945, 0.225, 0.23, 0.17, 1.76, 0.376, 4.058, 3.486, 1.074, -4.688]\n",
      "[12] NLL: 25.8837 Params: [4.226, 0.722, 0.462, 0.379, 0.711, -4.009, 2.437, -0.435, 1.26, 1.719]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Exception ignored in: <function UltraDict.__del__ at 0x14dfa6813a30>\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/hl3976/.local/lib/python3.10/site-packages/UltraDict/UltraDict.py\", line 507, in __del__\n",
      "    self.close()\n",
      "  File \"/home/hl3976/.local/lib/python3.10/site-packages/UltraDict/UltraDict.py\", line 989, in close\n",
      "    self.control.unlink()\n",
      "  File \"/ext3/miniconda3/lib/python3.10/multiprocessing/shared_memory.py\", line 243, in unlink\n",
      "    _posixshmem.shm_unlink(self._name)\n",
      "FileNotFoundError: [Errno 2] No such file or directory: '/psm_587b5707'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[13] NLL: 22.0724 Params: [4.578, 0.494, 0.493, 0.078, 1.134, 4.824, 1.011, -4.189, -1.763, -1.836]\n",
      "[14] NLL: 25.188 Params: [4.859, 0.88, 0.199, 0.346, 1.432, -0.801, 2.515, 2.231, -0.894, 4.492]\n",
      "[15] NLL: 21.0151 Params: [5.131, 0.168, 0.321, 0.495, 0.558, -1.758, -4.829, 3.975, -2.852, -0.801]\n",
      "[16] NLL: 24.3873 Params: [5.412, 0.554, 0.12, 0.209, 1.97, 2.578, -1.333, -2.173, -4.502, 2.832]\n",
      "[17] NLL: 21.8752 Params: [5.535, 0.531, 0.362, 0.187, 0.801, 0.864, -1.616, -3.848, 2.847, -2.163]\n",
      "[18] NLL: 24.8004 Params: [5.815, 0.917, 0.064, 0.392, 1.627, -4.731, -4.409, 1.909, 4.497, 4.194]\n",
      "[19] NLL: 22.7871 Params: [6.105, 0.187, 0.441, 0.261, 1.008, -2.515, 2.935, 4.219, 1.768, -0.503]\n",
      "[20] NLL: 15.986 Params: [6.386, 0.573, 0.236, 0.037, 1.47, 1.851, 0.728, -2.437, 0.898, 3.159]\n",
      "[21] NLL: 25.1507 Params: [6.878, 0.363, 0.205, 0.477, 1.892, -1.982, 2.075, -3.672, -1.079, -3.286]\n",
      "[22] NLL: 27.2544 Params: [7.159, 0.86, 0.471, 0.194, 0.679, 3.662, 4.243, 0.483, -1.265, 0.317]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "KeyboardInterrupt\n",
      "\n",
      "Process ForkPoolWorker-23:\n",
      "Traceback (most recent call last):\n",
      "  File \"/ext3/miniconda3/lib/python3.10/multiprocessing/process.py\", line 314, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/ext3/miniconda3/lib/python3.10/multiprocessing/process.py\", line 108, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/ext3/miniconda3/lib/python3.10/multiprocessing/pool.py\", line 125, in worker\n",
      "    result = (True, func(*args, **kwds))\n",
      "  File \"/scratch/hl3976/ma_lab/ninarow/model_fitting/model_fit.py\", line 223, in estimate_log_lik_ibs\n",
      "    search = self.model.create_search(\n",
      "  File \"/scratch/hl3976/ma_lab/ninarow/model_fitting/model_fit.py\", line 151, in create_search\n",
      "    return fourbynine.NInARowBestFirstSearch(heuristic, board)\n",
      "  File \"/scratch/hl3976/ma_lab/ninarow/model_fitting/fourbynine.py\", line 1616, in __init__\n",
      "    _swig_fourbynine.NInARowBestFirstSearch_swiginit(self, _swig_fourbynine.new_NInARowBestFirstSearch(_self, heuristic, board))\n",
      "KeyboardInterrupt\n"
     ]
    }
   ],
   "source": [
    "from multiprocessing import Pool, Value, set_start_method\n",
    "\n",
    "random.seed(10)\n",
    "initialize_global_threads(1, manual_seed = 3)\n",
    "model_fitter = ModelFitter(DefaultModel(), \n",
    "                           random_sample = random_sample, \n",
    "                           verbose = verbose, \n",
    "                           threads = threads)\n",
    "\n",
    "params, loglik_train, loglik_test = model_fitter.cross_validate(fold_data, fold_number - 1)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "singularity",
   "language": "python",
   "name": "my_env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
